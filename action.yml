---
name: 'MS Teams Notification Action'
description: 'Send a notification to Microsoft Teams for various events including pull requests and deployments'
inputs:
  webhook_url:
    description: 'Microsoft Teams webhook URL'
    required: true
  notification_type:
    description: 'Type of notification (pr, deployment_started, deployment_finished, custom)'
    required: true
    default: 'custom'
  title:
    description: 'Notification title'
    required: true
  message:
    description: 'Main notification message'
    required: true
  url:
    description: 'URL to link in the notification'
    required: false
    default: ''
  creator:
    description: 'Person who triggered the event'
    required: false
    default: ''
  repo_name:
    description: 'Repository name'
    required: false
    default: ''
  environment:
    description: 'Deployment environment (dev, staging, production, etc.)'
    required: false
    default: ''
  status:
    description: 'Status of the event (success, failure, in_progress)'
    required: false
    default: 'success'
  theme_color:
    description: 'Theme color for the Teams message card'
    required: false
    default: '0076D7'
  activity_image:
    description: 'Custom activity image URL'
    required: false
    default: 'https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png'
  additional_facts:
    description: 'JSON string of additional facts to include in the notification'
    required: false
    default: '[]'
runs:
  using: 'composite'
  steps:
    - name: Send Teams Notification
      shell: bash
      env:
        TEAMS_WEBHOOK_URL: ${{ inputs.webhook_url }}
        NOTIFICATION_TYPE: ${{ inputs.notification_type }}
        TITLE: ${{ inputs.title }}
        MESSAGE: ${{ inputs.message }}
        URL: ${{ inputs.url }}
        CREATOR: ${{ inputs.creator }}
        REPO_NAME: ${{ inputs.repo_name }}
        ENVIRONMENT: ${{ inputs.environment }}
        STATUS: ${{ inputs.status }}
        THEME_COLOR: ${{ inputs.theme_color }}
        ACTIVITY_IMAGE: ${{ inputs.activity_image }}
        ADDITIONAL_FACTS: ${{ inputs.additional_facts }}
      run: |
        # Function to check if a variable is empty
        is_empty() {
          local var_name="$1"
          local var_value="${!var_name}"
          if [ -z "$var_value" ]; then
            echo "Error: $var_name is required but not set."
            return 0
          fi
          return 1
        }

        # Check all required inputs
        required_inputs=("TEAMS_WEBHOOK_URL" "NOTIFICATION_TYPE" "TITLE" "MESSAGE")
        error_occurred=false

        for input in "${required_inputs[@]}"; do
          if is_empty "$input"; then
            error_occurred=true
          fi
        done

        if [ "$error_occurred" = true ]; then
          echo "One or more required inputs are missing. Please check the action configuration."
          exit 1
        fi

        # Set default values for optional inputs
        THEME="${THEME_COLOR:-0076D7}"
        IMAGE="${ACTIVITY_IMAGE:-https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png}"

        # Set theme color based on status if not explicitly set
        if [ "$STATUS" = "success" ] && [ "$THEME_COLOR" = "0076D7" ]; then
          THEME="00cc00"  # Green for success
        elif [ "$STATUS" = "failure" ]; then
          THEME="ff0000"  # Red for failure
        elif [ "$STATUS" = "in_progress" ]; then
          THEME="ffcc00"  # Yellow for in progress
        fi

        # Escape special characters in variables
        escape_string() {
          echo "$1" | sed 's/\\/\\\\/g; s/"/\\"/g; s/`/\\`/g; s/\$/\\$/g'
        }

        TITLE_ESCAPED=$(escape_string "$TITLE")
        MESSAGE_ESCAPED=$(escape_string "$MESSAGE")
        CREATOR_ESCAPED=$(escape_string "$CREATOR")
        REPO_NAME_ESCAPED=$(escape_string "$REPO_NAME")
        URL_ESCAPED=$(escape_string "$URL")
        ENVIRONMENT_ESCAPED=$(escape_string "$ENVIRONMENT")

        # Set activity title based on notification type
        ACTIVITY_TITLE=""
        BUTTON_TEXT=""
        
        case "$NOTIFICATION_TYPE" in
          "pr")
            ACTIVITY_TITLE="Pull Request in $REPO_NAME_ESCAPED"
            BUTTON_TEXT="View Pull Request"
            ;;
          "deployment_started")
            ACTIVITY_TITLE="Deployment Started: $REPO_NAME_ESCAPED"
            BUTTON_TEXT="View Deployment"
            ;;
          "deployment_finished")
            ACTIVITY_TITLE="Deployment Finished: $REPO_NAME_ESCAPED"
            BUTTON_TEXT="View Deployment"
            ;;
          *)
            ACTIVITY_TITLE="$TITLE_ESCAPED"
            BUTTON_TEXT="View Details"
            ;;
        esac

        # Build the facts array dynamically
        FACTS="["
        
        # Add the message as the first fact
        FACTS="$FACTS{\"name\": \"Details\", \"value\": \"$MESSAGE_ESCAPED\"}"
        
        # Add other facts conditionally
        if [ -n "$REPO_NAME" ]; then
          FACTS="$FACTS, {\"name\": \"Repository\", \"value\": \"$REPO_NAME_ESCAPED\"}"
        fi
        
        if [ -n "$CREATOR" ]; then
          FACTS="$FACTS, {\"name\": \"Triggered by\", \"value\": \"$CREATOR_ESCAPED\"}"
        fi
        
        if [ -n "$ENVIRONMENT" ]; then
          FACTS="$FACTS, {\"name\": \"Environment\", \"value\": \"$ENVIRONMENT_ESCAPED\"}"
        fi
        
        if [ -n "$STATUS" ] && [ "$STATUS" != "success" ]; then
          STATUS_ESCAPED=$(escape_string "$STATUS")
          FACTS="$FACTS, {\"name\": \"Status\", \"value\": \"$STATUS_ESCAPED\"}"
        fi
        
        # Add additional facts if provided
        if [ -n "$ADDITIONAL_FACTS" ] && [ "$ADDITIONAL_FACTS" != "[]" ]; then
          # Remove the opening and closing brackets from ADDITIONAL_FACTS
          ADDITIONAL_FACTS_CONTENT=$(echo "$ADDITIONAL_FACTS" | sed 's/^\[//; s/\]$//')
          
          if [ -n "$ADDITIONAL_FACTS_CONTENT" ]; then
            FACTS="$FACTS, $ADDITIONAL_FACTS_CONTENT"
          fi
        fi
        
        # Close the facts array
        FACTS="$FACTS]"
        
        # Build the actions array conditionally
        ACTIONS=""
        if [ -n "$URL" ]; then
          ACTIONS=", \"potentialAction\": [{
            \"@type\": \"OpenUri\",
            \"name\": \"$BUTTON_TEXT\",
            \"targets\": [{
              \"os\": \"default\",
              \"uri\": \"$URL_ESCAPED\"
            }]
          }]"
        fi

        # Send the notification
        PAYLOAD=$(cat <<EOF
        {"type": "message",
          "attachments": [
            {
              "contentType": "application/vnd.microsoft.card.adaptive",
              "content": {
                "type": "AdaptiveCard",	
                "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
                "version": "1.3",
                "body": [
                  {
                      "type": "TextBlock",
                      "text": "$TITLE_ESCAPED"
                  },
                  {
                      "type": "TextBlock",
                      "text": "$MESSAGE_ESCAPED",
                  }
                ]
              }
            }
          ]
          }
        EOF
        )
        curl -H "Content-Type: application/json" -d "$PAYLOAD" "$TEAMS_WEBHOOK_URL"

        if [ $? -ne 0 ]; then
          echo "Failed to send notification to Microsoft Teams."
          exit 1
        else
          echo "Notification sent successfully to Microsoft Teams."
        fi
